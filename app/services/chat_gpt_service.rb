module OpenaiChat
  class ChatGPTService
    MODEL = 'gpt-3.5-turbo'.freeze
    SYSTEM_PROMPT = 'You are a helpful assistant.'.freeze

    # @param [String] prompt
    # @param [String] model
    # @param [String] system_prompt
    def initialize(prompt, model: nil, system_prompt: nil)
      @prompt = prompt
      @model = model || MODEL
      @system_prompt = system_prompt || SYSTEM_PROMPT
      @client = ChatGPTClient.new
    end

    def chat
      @client.chat(chat_params)
    end

    private

    # Roles:
    # 1) The "user" role represents the input or query from the end-user or the person interacting
    # with the application. This role is where you provide the initial user message or question to
    # the model, setting the context for the conversation.
    # 2) The "assistant" role represents the responses generated by the model. After the user's input,
    # the model replies as the assistant. The assistant role's content is the reply or response from the
    # model based on the context provided in previous messages in the conversation.
    # 3) The "system" role is used to provide high-level instructions or settings to the model.
    # These instructions can guide the model's behavior throughout the conversation. For instance,
    # you can use this role to set the tone, instruct the model to think step-by-step, or even simulate
    # a specific persona for the assistant.
    #
    # Temperature:
    # Optional. The temperature parameter determines the level of creativity and randomness in the model's
    # responses. Higher values (e.g., 0.8, 1.0) make the generated text more diverse and creative, while
    # lower values (e.g., 0.2, 0.5) make the responses more focused and deterministic.
    def chat_params
      {
        model: @model,
        messages: [
          { role: 'system', content: @system_prompt },
          { role: 'user', content: @prompt }
        ],
        temperature: 0.7,
      }
    end
  end
end
